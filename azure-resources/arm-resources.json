{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "String",
      "metadata": {
        "description": "Specifies the name of the Azure Storage account."
      }
    },
    "containerName": {
      "defaultValue": "logs",
      "type": "String",
      "metadata": {
        "description": "Specifies the name of the blob container."
      }
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "String",
      "metadata": {
        "description": "Specifies the location in which the Azure Storage resources should be deployed."
      }
    },
    "serverName": {
      "defaultValue": "[uniqueString('sql', resourceGroup().id)]",
      "type": "String",
      "metadata": {
        "description": "The name of the SQL logical server."
      }
    },
    "sqlDBName": {
      "defaultValue": "SampleDB",
      "type": "String",
      "metadata": {
        "description": "The name of the SQL Database."
      }
    },
    "administratorLogin": {
      "type": "String",
      "metadata": {
        "description": "The administrator username of the SQL logical server."
      }
    },
    "administratorLoginPassword": {
      "type": "SecureString",
      "metadata": {
        "description": "The administrator password of the SQL logical server."
      }
    },
    "factoryName": {
            "type": "string",
            "metadata": "Specifies the name of the Data Factory name"
            
    },
    "dataFactory_identity_type": {
        "type": "string",
        "defaultValue": "SystemAssigned"
    },
    "keyVaultName": {
      "type": "String",
      "metadata": {
        "description": "Specifies the name of the key vault."
      }
    },
    "enabledForDeployment": {
      "defaultValue": false,
      "type": "Bool",
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "defaultValue": false,
      "type": "Bool",
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "tenantId": {
      "defaultValue": "[subscription().tenantId]",
      "type": "String",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "skuName": {
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "type": "String",
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    },
    "OtherGroupName":{
            "defaultValue": "[resourceGroup().name]",
            "type": "String"
        }
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": {
          "Department": "Finance",
          "Environment": "Development"
            },
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "publicNetworkAccess": "Enabled",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[reference(ResourceId(parameters('OtherGroupName'), 'Microsoft.DataFactory/factories', parameters('factoryName')),'2018-06-01','Full').identity.principalId]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "secrets": [
                "Get",
                "List"
              ]
            }
          }
        ],
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": {
        "Department": "Finance",
        "Environment": "Development"
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "dnsEndpointType": "Standard",
        "defaultToOAuthAuthentication": false,
        "publicNetworkAccess": "Enabled",
        "allowCrossTenantReplication": false,
        "isSftpEnabled": false,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "requireInfrastructureEncryption": false,
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('containerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-08-01-preview",
      "name": "[parameters('serverName')]",
      "location": "[parameters('location')]",
      "tags": {
          "Department": "Finance",
          "Environment": "Development"
            },
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "publicNetworkAccess": "Enabled",
        "restrictOutboundNetworkAccess": "Disabled"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-08-01-preview",
      "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlDBName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
      ],
      "sku": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "capacity": 1
      }
    },
    {
        "name": "[concat(parameters('serverName'),'/AllowAllWindowsAzureIps')]",
        "type": "Microsoft.Sql/servers/firewallRules",
        "location": "[resourceGroup().location]",
        "apiVersion": "2014-04-01-preview",
        "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
        ],
            "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
    },
    {
        "name": "[parameters('factoryName')]",
        "type": "Microsoft.DataFactory/factories",
        "apiVersion": "2018-06-01",
        "properties": {},
        "tags": {
            "Department": "Finance",
            "Environment": "Development"
        },
        "dependsOn": [],
        "location": "[parameters('location')]",
        "identity": {
            "type": "[parameters('dataFactory_identity_type')]",
            "principalId": null,
            "tenantId": null
        }
    },
    {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "name": "[concat(parameters('keyVaultName'), '/', 'StorageAccountKey')]",
        "apiVersion": "2019-09-01",
        "location": "[parameters('location')]",
        "scale": null,
        "properties": {
            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2016-01-01').keys[0].value]",
            "contentType": "string",
            "attributes": {
                "enabled": true
            }
        },
        "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
        ]
    },
    {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "[concat(parameters('keyVaultName'), '/', 'SqlConnectionString')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        ],
        "properties": {
          "value": "[concat('Server=tcp:',reference(parameters('serverName')).fullyQualifiedDomainName,',1433;Initial Catalog=',parameters('sqlDBName'),';Persist Security Info=False;User ID=',reference(parameters('serverName')).administratorLogin,';Password=',parameters('administratorLoginPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
        }
      }
  ]
}